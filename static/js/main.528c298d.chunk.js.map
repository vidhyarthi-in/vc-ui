{"version":3,"sources":["Reducers/LoginReducer.js","Reducers/index.js","store.js","views/Login.js","views/JoinMeet.js","Routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","rootReducer","combineReducers","Login","state","action","type","store","createStore","className","src","alt","name","placeholder","aria-hidden","JoinMeet","customHistory","createBrowserHistory","require","AppRouter","history","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAAMA,EAAe,GCGRC,EAAcC,YAAgB,CACvCC,MDFW,WAAyC,IAA/BC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCACnD,OAAQA,EAAOC,MACX,IAAK,GACD,MAAO,GACX,QACI,OAAOF,MEJNG,EAAQC,YACjBP,G,wBCDSE,EAAQ,WACjB,OACI,yBAAKM,UAAU,WACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,KACI,yBAAKC,IAAI,uBAAuBC,IAAI,gBAG5C,yBAAKF,UAAU,cACX,0BAAMA,UAAU,oBAAhB,gBAGA,yBAAKA,UAAU,6BACX,2BAAOA,UAAU,WAAWH,KAAK,OAAOM,KAAK,QAAQC,YAAY,UACjE,0BAAMJ,UAAU,gBAChB,0BAAMA,UAAU,gBACrC,uBAAGA,UAAU,iBAAiBK,cAAY,WAGzB,yBAAKL,UAAU,6BACX,2BAAOA,UAAU,WAAWH,KAAK,WAAWM,KAAK,OAAOC,YAAY,aACpE,0BAAMJ,UAAU,gBAChB,0BAAMA,UAAU,gBACrC,uBAAGA,UAAU,aAAaK,cAAY,WAGrB,yBAAKL,UAAU,4BACX,4BAAQA,UAAU,kBAAlB,eC7BfM,EAAW,WACpB,OACI,yBAAKN,UAAU,WACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,KACI,yBAAKC,IAAI,uBAAuBC,IAAI,gBAG5C,yBAAKF,UAAU,cACX,0BAAMA,UAAU,oBAAhB,gBAGA,yBAAKA,UAAU,6BACX,2BAAOA,UAAU,WAAWH,KAAK,OAAOM,KAAK,aAAaC,YAAY,eACtE,0BAAMJ,UAAU,gBAChB,0BAAMA,UAAU,gBACrC,uBAAGA,UAAU,YAAYK,cAAY,WAGpB,yBAAKL,UAAU,4BACX,4BAAQA,UAAU,kBAAlB,SAIJ,yBAAKA,UAAU,aAAY,qECvB7CO,GAAgBC,EADOC,EAAQ,IAAWD,wBAGnCE,EAAY,WACrB,OACI,yBAAKV,UAAU,IACX,kBAAC,IAAD,CAAQW,QAASJ,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,KAAK,SAASC,OAAO,EAAMC,UAAWpB,IAC7C,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,OAAO,EAAMC,UAAWR,Q,MCC7CS,MARf,WACE,OACI,kBAAC,IAAD,CAAUjB,MAAOA,GACX,kBAAC,EAAD,QCEQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.528c298d.chunk.js","sourcesContent":["const initialState = {}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"\":\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport LoginReducer from \"./LoginReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    Login: LoginReducer\r\n})\r\n","import {rootReducer} from \"./Reducers\";\r\nimport {createStore} from \"redux\";\r\n\r\nexport const store = createStore(\r\n    rootReducer\r\n)\r\n","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\n\r\nexport const Login = () => {\r\n    return (\r\n        <div className=\"limiter\">\r\n            <div className=\"container-login\">\r\n                <div className=\"wrap-login\">\r\n                    <div className=\"login-pic\">\r\n                        <Tilt>\r\n                            <img src=\"images/login-img.png\" alt=\"login-img\"/>\r\n                        </Tilt>\r\n                    </div>\r\n                    <div className=\"login-form\">\r\n                        <span className=\"login-form-title\">\r\n\t\t\t\t\t\t    Member Login\r\n\t\t\t\t\t    </span>\r\n                        <div className=\"wrap-input validate-input\">\r\n                            <input className=\"inputCls\" type=\"text\" name=\"email\" placeholder=\"Email\"/>\r\n                            <span className=\"focus-input\"></span>\r\n                            <span className=\"symbol-input\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t</span>\r\n                        </div>\r\n                        <div className=\"wrap-input validate-input\">\r\n                            <input className=\"inputCls\" type=\"password\" name=\"pass\" placeholder=\"Password\"/>\r\n                            <span className=\"focus-input\"></span>\r\n                            <span className=\"symbol-input\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-lock\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t</span>\r\n                        </div>\r\n                        <div className=\"container-login-form-btn\">\r\n                            <button className=\"login-form-btn\">\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\n\r\nexport const JoinMeet = () => {\r\n    return (\r\n        <div className=\"limiter\">\r\n            <div className=\"container-login\">\r\n                <div className=\"wrap-login\">\r\n                    <div className=\"login-pic\">\r\n                        <Tilt>\r\n                            <img src=\"images/login-img.png\" alt=\"login-img\"/>\r\n                        </Tilt>\r\n                    </div>\r\n                    <div className=\"login-form\">\r\n                        <span className=\"login-form-title\">\r\n\t\t\t\t\t\t    Join Meeting\r\n\t\t\t\t\t    </span>\r\n                        <div className=\"wrap-input validate-input\">\r\n                            <input className=\"inputCls\" type=\"text\" name=\"Meeting Id\" placeholder=\"Meeting Id\"/>\r\n                            <span className=\"focus-input\"></span>\r\n                            <span className=\"symbol-input\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-key\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t</span>\r\n                        </div>\r\n                        <div className=\"container-login-form-btn\">\r\n                            <button className=\"login-form-btn\">\r\n                                Join\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"copyright\"><small>copyright Â© vidhyarthi.in</small></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Router, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../views/Login\";\r\nimport {JoinMeet} from \"../views/JoinMeet\";\r\n\r\nconst createBrowserHistory = require(\"history\").createBrowserHistory;\r\nconst customHistory = createBrowserHistory();\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <div className=\"\">\r\n            <Router history={customHistory}>\r\n                <Switch>\r\n                    <Route path=\"/login\" exact={true} component={Login}/>\r\n                    <Route path=\"/\" exact={true} component={JoinMeet} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {AppRouter} from \"./Routes/Routes\";\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\nfunction App() {\n  return (\n      <Provider store={store}>\n            <AppRouter/>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}